/// Generated from {{ self._TemplateReference__context.name | get_template_name_from_path }} by SBAG (https://github.com/vtanja/JSD)
/// on {{ date }}

package com.example.{{ app }}.model;

import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;
{% for property in entity.properties %}
{% if property | get_type != 'base' %}
import com.example.{{ app }}.model.{{ property.ptype }};
{% endif %}
{% endfor %}
import javax.persistence.*;
import java.util.Set;

@Getter @Setter
@NoArgsConstructor
@AllArgsConstructor
@Entity
public class {{ entity.name | capitalize }} {

    {% for property in entity.properties %}
    {% if property | get_type != 'base' %}
    {% if property | get_association_type == 'OneToOne'%}
    @OneToOne
    private {{ property.ptype.name }} {{ property.name }};
    {% elif property | get_association_type == 'ManyToMany'%}
    {% if property.atype.owner == '' %}
    @ManyToMany
    @JoinTable
    private Set<{{ property.ptype.name }}> {{ property.name }};
    {% else %}
    @ManyToMany(mappedBy = "{{property.atype.owner}}")
    private Set<{{ property.ptype.name }}> {{ property.name }};
    {% endif %}
    {% elif property | get_association_type == 'OneToMany'%}
    @OneToMany(mappedBy = "{{property.atype.owner}}")
    private Set<{{ property.ptype.name }}> {{ property.name }};
    {% elif property | get_association_type == 'ManyToOne'%}
    @ManyToOne
    @JoinColumn
    private {{ property.ptype.name }} {{ property.name }};
    {% endif %}
    {% elif property.name == 'id' %}
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private {{ property.ptype}} {{ property.name }};
    {% else %}
    @Column
    private {{ property.ptype}} {{ property.name }};
    {% endif %}

    {% endfor %}
}
