import { Component, OnInit, Output, EventEmitter } from '@angular/core';
{% set entity_name = entity.name | lower %}
{% set entity_name_plural = entity.name | plural %}
{% set entity_list_field = entity.name | plural | lower %}
{% set service_field = (entity.name | lower) + 'Service' %}
{% set service_type = (entity.name) + 'Service' %}
{% set model = 'I' + (entity.name) %}

import { {{service_type}} } from '../{{entity_name}}.service';
import { {{ model }} } from '../../../shared/model/{{entity_name}}.model';
import { Router } from '@angular/router';
import { NgbModal, ModalDismissReasons } from '@ng-bootstrap/ng-bootstrap';
import { SharedService } from 'src/app/shared/shared.service';

@Component({
	selector: 'app-{{entity_name}}-list',
	templateUrl: './{{entity_name}}-list.component.html',
	styleUrls: ['./{{entity_name}}-list.component.css'],
})
export class {{entity.name}}ListComponent implements OnInit {
	
	{{entity_list_field}}: {{ model }}[] = []; 

	totalLength: any;
	page:number = 1;
	elementsPerPage = 5;
	options:number[] = [5, 10, 15];
	idToDelete: any;
	isLoading: boolean = true;

	isDisabled: boolean = false;

	closeResult: string = '';

    constructor(
		private {{service_field}}: {{service_type}},
		private router: Router,
		private modalService: NgbModal,
		private sharedService: SharedService
	){}

	ngOnInit(){
		this.{{service_field}}.get{{entity_name_plural}}Count().subscribe(
			(val: number ) => {
				this.totalLength = val; 
				this.{{service_field}}.get{{entity_name_plural}}(this.page-1, this.elementsPerPage).subscribe(
					(data: {{model}}[] ) => {
						this.{{entity_list_field}} = data;
						this.sharedService.isLoading(false);
						this.isLoading = false;
					},
					(error) => alert(error.error)
				);
			},
			(error) => alert(error.error)
		);
	}

	onChange(newValue:number) {
    	console.log(newValue);
	    this.elementsPerPage = newValue;
	}

	changePage(page: number){
		this.sharedService.isLoading(true);
		this.isLoading = true;
		this.page = page;
		this.{{service_field}}.get{{entity_name_plural}}(this.page-1, this.elementsPerPage).subscribe(
			(data: {{model}}[] ) => {
				this.{{entity_list_field}} = data;
				this.sharedService.isLoading(false);
				this.isLoading = false;
			},
			(error) => alert(error.error)
    	);
	}

	delete{{entity_name|capitalize}}(id: number){
		this.{{service_field}}.delete{{entity_name|capitalize}}(id).subscribe(
			data =>{
				alert("{{entity.name}} has been successfully deleted!");
			},
			error => {
				alert("Something went wrong while deleting {{entity_name}}!");
			}
		);
		let path = '/{{entity_name}}';

		this.router.navigateByUrl('', { skipLocationChange: true }).then(() => {
			this.router.navigate([path]);
		});
	}

	open(content:any) {
		this.modalService.open(content, {ariaLabelledBy: 'modal-basic-title'}).result.then((result) => {
		this.closeResult = `Closed with: ${result}`;
		}, (reason) => {
		this.closeResult = `Dismissed ${this.getDismissReason(reason)}`;
		});
	}

	private getDismissReason(reason: any): string {
		if (reason === ModalDismissReasons.ESC) {
		return 'by pressing ESC';
		} else if (reason === ModalDismissReasons.BACKDROP_CLICK) {
		return 'by clicking on a backdrop';
		} else {
		return `with: ${reason}`;
		}
	}
}
