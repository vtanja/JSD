package com.example.{{ app }}.controller;

import org.springframework.web.bind.annotation.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.beans.factory.annotation.Autowired;
import lombok.extern.slf4j.Slf4j;
import com.example.{{ app }}.dto.{{entity.name}}DTO;
import com.example.{{ app }}.service.{{entity.name}}Service;


@CrossOrigin
@RestController
@Slf4j
@RequestMapping( path = "/{{ entity.name | lower }}")
public class {{ entity.name | capitalize }}Controller {
    private final {{ entity.name }}Service {{ entity.name | lower }}Service;

    @Autowired
    public {{ entity.name | capitalize }}Controller({{ entity.name }}Service service){
        this.{{ entity.name | lower }}Service = service;
    }

    @GetMapping(path="/get-all-{{ entity.name | plural | lower }}")
    public ResponseEntity<List<{{ entity.name }}DTO>> getAll{{ entity.name | plural }}() {

        List<{{ entity.name }}DTO> {{ entity.name | lower | plural }}List = {{ entity.name | lower }}Service.get{{entity.name | plural}}();

        return new ResponseEntity<>({{ entity.name | lower | plural }}List, HttpStatus.OK);
    }

    @GetMapping(path="/get-{{ entity.name | lower }}/{id}")
    public ResponseEntity<{{ entity.name }}DTO> Get{{ entity.name }}(@PathVariable Int id) {

        {{ entity.name }}DTO {{ entity.name }}Dto = {{ entity.name | lower }}Service.get{{entity.name}}(id);

        return new ResponseEntity<>({{ entity.name }}Dto, HttpStatus.OK);
    }

    @PostMapping(path = "/create")
    public ResponseEntity<?> Create(@RequestBody {{ entity.name }}DTO {{entity.name}}Dto) {
        {{ entity.name | lower }}Service.create({{entity.name}}Dto);
        return new ResponseEntity<>(HttpStatus.OK);
    }

    @PostMapping(path = "/update/{id}")
    public ResponseEntity<?> Update(@PathVariable int id, @RequestBody {{ entity.name }}DTO {{entity.name}}Dto) {
        {{entity.name}}DTO {{entity.name}}Dto = {{ entity.name | lower }}Service.update{{ entity.name }}(id, {{entity.name}}Dto);
    }

    @DeleteMapping(path = "/delete/{id}")
    public ResponseEntity<?> Delete(@PathVariable int id) {
        {{ entity.name | lower }}Service.delete{{ entity.name }}(id);
    }

}