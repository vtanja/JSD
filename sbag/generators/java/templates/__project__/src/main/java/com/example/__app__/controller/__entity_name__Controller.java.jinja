package com.example.{{ app }}.controller;

import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.beans.factory.annotation.Autowired;
import lombok.extern.slf4j.Slf4j;
import java.util.List;
import com.example.{{ app }}.dto.{{entity.name}}DTO;
import com.example.{{ app }}.dto.{{entity.name}}DetailDTO;
import com.example.{{ app }}.service.{{entity.name}}Service;

{% set controllerName = (entity.name | capitalize) + 'Controller' %}
{% set DtoType = entity.name + 'DTO' %}
{% set DtoDetailType = entity.name + 'DetailDTO' %}
{% set entityDto = (entity.name | lower) + 'Dto' %}
{% set entityService = (entity.name | lower) + 'Service' %}
{% set entities = (entity.name | plural) %}

@CrossOrigin
@RestController
@Slf4j
@RequestMapping( path = "/{{ entity.name | lower }}")
public class {{ controllerName }} {
    @Autowired
    private {{ entity.name }}Service {{ entityService }};

    @GetMapping(path="/count")
    public ResponseEntity<Integer> get{{ entities }}Count() {

        return {{ entityService }}.get{{entity.name | plural}}Count();
    }

    @GetMapping(path="/{pageNo}/{pageSize}")
    public ResponseEntity<List<{{ DtoType }}>> getAll{{ entities }}(@PathVariable int pageNo, @PathVariable int pageSize) {

        return {{ entityService }}.get{{entity.name | plural}}(pageNo, pageSize);
    }

    @GetMapping(path="/{id}")
    public ResponseEntity<{{ DtoDetailType }}> get{{ entity.name }}(@PathVariable Long id) {

        return {{ entityService }}.get{{entity.name}}(id);
    }

    @PostMapping()
    public ResponseEntity<{{ DtoDetailType }}> create(@RequestBody {{ DtoDetailType }} {{ entityDto }}) {
        return {{ entityService }}.create({{ entityDto }});
    }

    @PutMapping(path = "/{id}")
    public ResponseEntity<{{ DtoDetailType }}> update(@PathVariable Long id, @RequestBody {{ DtoDetailType }} {{ entityDto }}) {
        return {{ entityService }}.update{{ entity.name }}(id, {{ entityDto }});
    }

    @DeleteMapping(path = "/{id}")
    public ResponseEntity<?> delete(@PathVariable Long id) {
        return {{ entityService }}.delete{{ entity.name }}(id);
    }

    @GetMapping(path="/lists")
    public ResponseEntity<String> getLists() {
        try {
            return {{ entityService }}.getLists();
        }
        catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

}
