package com.example.{{ app }}.service;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.modelmapper.ModelMapper;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.modelmapper.ModelMapper;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import com.example.{{ app }}.dto.{{entity.name}}DetailDTO;
import com.example.{{ app }}.dto.{{entity.name}}DTO;
import com.example.{{ app }}.model.{{ entity.name }};
import com.example.{{ app }}.repository.{{ entity.name | capitalize }}Repository;
import com.example.{{ app }}.exception.NotFoundException;
{% for property in entity.properties %}
{% if (property | get_type != 'base') %}
import com.example.{{ app }}.model.{{property.ptype.name}};
import com.example.{{ app }}.dto.{{ property.ptype }}DTO;
import com.example.{{ app }}.service.{{property.ptype}}Service;
{% endif %}
{% endfor %}

import java.util.*;

{% set classType = (entity.name) %}
{% set dtoType = (entity.name) + 'DTO' %}
{% set dtoDetailType = (entity.name) + 'DetailDTO' %}
{% set field = (entity.name|lower) %}
{% set dtoField = (entity.name|lower) + 'DTO' %}
{% set fieldList = (entity.name|plural|lower) %}
{% set dtoFieldList = (entity.name|lower) + 'DTOS' %}
{% set serviceName = (entity.name) + 'Service' %}
{% set repositoryName = (entity.name) + 'Repository' %}
{% set repositoryFieldName = (entity.name | lower) + 'Repository' %}

@Service
public class {{serviceName}} {
    @Autowired
    private {{ repositoryName }} {{repositoryFieldName}};
    @Autowired
    private ModelMapper modelMapper;

{% if entity | has_associations == True %}
{% for property in entity.properties %}
{% if property | get_type != 'base' %}
    @Autowired
    private {{property.ptype}}Service {{property.ptype.name | first_letter_lower}}Service;
{% endif %}
{% endfor %}
{% endif %}

    public {{entity.name}} getById(Long id){
        if ({{repositoryFieldName}}.findById(id).isPresent())
            return {{repositoryFieldName}}.findById(id).get();
        else
            return null;
    }

    public ResponseEntity<Integer> get{{entity.name | plural}}Count(){
        return new ResponseEntity<>({{repositoryFieldName}}.findAll().size(), HttpStatus.OK);
    }

    public ResponseEntity<List<{{ dtoType }}>> get{{entity.name|plural}}(int pageNo, int pageSize){
        List<{{ dtoType }}> {{ dtoFieldList}} = new ArrayList<{{ dtoType }}>();
        Pageable paging = PageRequest.of(pageNo, pageSize);
        Page<{{classType}}> pagedResult = {{repositoryFieldName}}.findAll(paging);
         
        if (pagedResult.hasContent()) {
            List<{{classType}}> {{fieldList}} = pagedResult.getContent();

            for ({{classType}} {{field}} : {{fieldList}})
            {
                {{ dtoType }} {{ dtoField }} = modelMapper.map({{field}}, {{ dtoType }}.class);
                {{ dtoFieldList }}.add({{ dtoField }});
            }

        }
        return new ResponseEntity<>({{ dtoFieldList}}, HttpStatus.OK);
    }

    public ResponseEntity<{{ dtoDetailType }}> get{{entity.name}}(Long id){
        {{ classType }} {{ field }} = {{ repositoryFieldName }}.findById(id).orElseThrow(
            () -> new NotFoundException("{{ classType }} with given id was not found."));
        {{ dtoDetailType }} {{ dtoField }} = modelMapper.map({{ field }}, {{ dtoDetailType }}.class);
        return new ResponseEntity<>({{ dtoField }}, HttpStatus.OK);
    }

    public ResponseEntity<{{ dtoType }}> update{{entity.name}}(Long id, {{ dtoType }} {{ dtoField }}){
        ModelMapper modelMapper = new ModelMapper();
        {{ entity.name }} {{ entity.name | lower }} = {{entity.name | lower}}Repository.find{{ entity.name }}ById(id);
        if({{ entity.name | lower }} == null) {
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST); 
        }
        else {
        {% for property in entity.properties %}
        {% if  property | get_type == 'base' %}
            {{entity.name | lower}}.set{{property.name | capitalize_first_letter}}({{ dtoField }}.get{{property.name | capitalize_first_letter}}());
        {% else %}
            //{{entity.name | lower}}.set{{property.name | capitalize_first_letter}}(null);
        {% endif %}
        {% endfor %}
            {{entity.name | lower}}Repository.save({{entity.name | lower}});
            {{ entity.name }}DTO retDto = modelMapper.map({{ entity.name | lower }}, {{ entity.name }}DTO.class);
            return new ResponseEntity<>(retDto, HttpStatus.OK); 
        }
    }

    public ResponseEntity<{{ dtoDetailType }}> create({{ dtoDetailType }} {{entity.name|lower}}Dto){
        {{entity.name}} {{entity.name | lower}} = new {{entity.name}}();
    {% for property in entity.properties %}
    {% if property | get_type == 'base' %}
        {{entity.name | lower}}.set{{property.name | capitalize_first_letter}}({{entity.name|lower}}Dto.get{{property.name | capitalize_first_letter}}());
    
    {% elif property | get_type == 'entity' %}
        if({{entity.name|lower}}Dto.get{{property.name | capitalize_first_letter}}() != null) {
            {{entity.name | lower}}.set{{property.name | capitalize_first_letter}}(
                {{property.ptype.name | first_letter_lower}}Service.getById({{entity.name|lower}}Dto.getId())
            );
        }
        else 
            {{entity.name | lower}}.set{{property.name | capitalize_first_letter}}(null);
        
    {% else %}
        if({{entity.name|lower}}Dto.get{{property.name | capitalize_first_letter}}() != null) {
            Set<{{property.ptype.name}}> {{ property.name | lower }} = new HashSet<>();
            for ({{property.ptype.name}}DTO dto: {{entity.name|lower}}Dto.get{{property.name | capitalize_first_letter}}()) {
                {{ property.name | lower }}.add({{property.ptype.name | first_letter_lower}}Service.getById(dto.getId()));
            }
            {{entity.name | lower}}.set{{property.name | capitalize_first_letter}}({{ property.name | lower }});
        }
        else
            {{entity.name | lower}}.set{{property.name | capitalize_first_letter}}(null);

	{% endif %}
    {% endfor %}
        {{entity.name | lower}}Repository.save({{entity.name | lower}});
        return new ResponseEntity<>(HttpStatus.OK); 
    }

    public ResponseEntity<Void> delete{{entity.name}}(Long id){
        try{
            {{repositoryFieldName}}.deleteById(id);
            return new ResponseEntity<>(HttpStatus.OK);
        }
        catch(Exception e){
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }
    }

    public ResponseEntity<String> getLists() throws JsonProcessingException{
        HashMap<String,Object> map = new HashMap<>();
        
    {% for property in entity.properties %}
    {% if property | get_type != 'base' %}
        List<{{property.ptype}}DTO> {{ property.name | first_letter_lower }} = {{property.ptype.name | first_letter_lower}}Service.getAll();
        map.put("{{ property.name }}List", {{ property.name | first_letter_lower }});
    {% endif %}
    {% endfor %}
        String json = new ObjectMapper().writeValueAsString(map);
        return new ResponseEntity<>(json, HttpStatus.OK);
    }

    public List<{{ dtoType }}>getAll(){
        List<{{classType}}> {{fieldList}} = {{repositoryFieldName}}.findAll();
        List<{{dtoType}}> {{dtoFieldList}} = new LinkedList<>();
        for({{classType}} {{field}}: {{fieldList}}) {
            {{ dtoType }} {{ dtoField }} = modelMapper.map({{field}}, {{ dtoType }}.class);
            {{ dtoFieldList }}.add({{ dtoField }});
        }
        return {{dtoFieldList}};
    }
}
